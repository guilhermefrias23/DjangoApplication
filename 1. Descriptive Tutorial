Following the tutorial here described (https://docs.djangoproject.com/en/4.2/intro/tutorial01/) we can create a small application in Django.

On your Python Interpreter (in my scenario VSCode) I've created a venv witht the command 
  <python -m venv DjangoProject>

Then, after activating this venv I've placed the following code
  <django-admin startproject mysite>
This step allows the creation of a pre-built project that will create (on the folder I'm in) a folder named mysite that contains the following structure:

mysite/
    manage.py
    mysite/
        __init__.py
        settings.py
        urls.py
        asgi.py
        wsgi.py

The information on these program is described below:
"""
The outer mysite/ root directory is a container for your project. Its name doesn’t matter to Django; you can rename it to anything you like.
 - manage.py: A command-line utility that lets you interact with this Django project in various ways. You can read all the details about manage.py in django-admin and manage.py.
 - The inner mysite/ directory is the actual Python package for your project. Its name is the Python package name you’ll need to use to import anything inside it (e.g. mysite.urls).
 - mysite/__init__.py: An empty file that tells Python that this directory should be considered a Python package. If you’re a Python beginner, read more about packages in the official Python docs.
 - mysite/settings.py: Settings/configuration for this Django project. Django settings will tell you all about how settings work.
 - mysite/urls.py: The URL declarations for this Django project; a “table of contents” of your Django-powered site. You can read more about URLs in URL dispatcher.
 - mysite/asgi.py: An entry-point for ASGI-compatible web servers to serve your project. See How to deploy with ASGI for more details.
 - mysite/wsgi.py: An entry-point for WSGI-compatible web servers to serve your project. See How to deploy with WSGI for more details.
"""

To run the development server we run the command inside the mysite folder
< python manage.py runserver >
This will output an url that can be followed to a local server.

We can configure the port to which we are running this local server with an argument after the runserver. By default the port will be the 8000:
 < python manager.py runserver 8080 >
We can also change the IP address of it
 < python manage.py runserver 0.0.0.0:8000>


To create an App we run the command:
 < python manage.py startapp polls >
This will create an app named polls tat will appear on our directory:
polls/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    views.py

Now we'll create a view.

1. On the polls/views.py file we place the code:
from django.http import HttpResponse
def index(request):
    return HttpResponse("Hello, world. You're at the polls index.")

2. And on the polls/urls.py we place this code:
from django.urls import path
from . import views
urlpatterns = [
    path("", views.index, name="index"),
]

3. Now point this url on the polls/urls to the main project:
from django.contrib import admin
from django.urls import include, path
urlpatterns = [
    path("polls/", include("polls.urls")),
    path("admin/", admin.site.urls),
]

Running again the python manage.py runserver, we can regenerate the webpage, and if we go to:
 < http://127.0.0.1:8000/polls/ > Since we are creating a new segment inside the main web application
We'll be able to see the small message "Hello, world. You're at the polls index."

